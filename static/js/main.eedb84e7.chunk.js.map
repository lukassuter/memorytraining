{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","index","setIndex","showText","setShowText","numbers","currentItem","setCurrentItem","errors","setErrors","acceptedAnswers","setAcceptedAnswers","text","setText","Date","now","startTime","setStartTime","elapsedTime","setElapsedTime","startIndex","setStartIndex","numberOfItems","setNumberOfItems","shownNumbers","setShownNumbers","useEffect","isNaN","items","slice","sort","Math","random","length","lastImage","displayText","showNextItem","swedishTranslation","toLowerCase","secondsSinceStart","className","map","error","number","acceptedAnswer","autoFocus","type","value","onKeyPress","event","key","handleKeyPress","onChange","target","onClick","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAiLeA,EA7KI,WAAO,IAAD,EACGC,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,OAESF,oBAAS,GAFlB,mBAEhBG,EAFgB,KAENC,EAFM,OAGeJ,mBAASK,EAAQ,IAHhC,mBAGhBC,EAHgB,KAGHC,EAHG,OAIKP,mBAAS,IAJd,mBAIhBQ,EAJgB,KAIRC,EAJQ,OAKuBT,mBAAS,IALhC,mBAKhBU,EALgB,KAKCC,EALD,OAMCX,mBAAS,IANV,mBAMhBY,EANgB,KAMVC,EANU,OAOWb,mBAASc,KAAKC,OAPzB,mBAOhBC,EAPgB,KAOLC,EAPK,OAQejB,qBARf,mBAQhBkB,EARgB,KAQHC,EARG,OASanB,qBATb,mBAShBoB,EATgB,KASJC,EATI,OAUmBrB,qBAVnB,mBAUhBsB,EAVgB,KAUDC,EAVC,OAWiBvB,mBAAS,IAX1B,mBAWhBwB,EAXgB,KAWFC,EAXE,KAavBC,qBAAU,WACRL,EAAc,GACdnB,EAAS,GACTqB,EAAiB,MAChB,IAEHG,qBAAU,WACR,KACEN,EAAa,GACbE,EAAgB,GAChBA,EAAgBF,EAAa,KAC7BO,MAAMP,IACNO,MAAML,IALR,CASA,IAAMM,EAAQvB,EACXwB,MAAMT,EAAYA,EAAaE,GAC/BQ,MAAK,iBAAM,GAAMC,KAAKC,YACzBP,EAAgBG,MACf,CAACN,EAAeF,IAEnBM,qBAAU,WACoB,IAAxBF,EAAaS,QAGjB1B,EAAeiB,EAAavB,MAC3B,CAACA,EAAOuB,IAEX,IAAMU,EAAYjC,GAASuB,EAAaS,OAClCE,EAAW,iBAAa3B,EAAOyB,OAApB,8BAAgDvB,EAAgBuB,QAE3EG,EAAe,WACnB,GAAKjC,GAeL,GAXIG,EAAY+B,mBAAmBC,gBAAkB1B,EAAK0B,cACxD3B,EAAmB,GAAD,mBAAKD,GAAL,CAAsBJ,KAExCG,EAAU,GAAD,mBAAKD,GAAL,CAAaF,KAGxBO,EAAQ,IACRT,GAAY,GACZF,EAASD,EAAQ,GAECA,GAASuB,EAAaS,OAAS,EAClC,CACb,IAAMM,GAAqBzB,KAAKC,MAAQC,GAAa,IACrDG,EAAe,GAAD,OAAIoB,EAAJ,mBAhBdnC,GAAY,IAuChB,OACE,qBAAKoC,UAAU,YAAf,SACE,qBAAKA,UAAU,WAAf,SACGN,EACC,qBAAKM,UAAU,UAAf,SACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,YAAf,SAA4BL,IAC5B,gCACE,+CAAkBjB,KAClB,uBACA,yCACCV,EAAOiC,KAAI,SAACC,GAAD,OACV,sBAAKF,UAAU,cAAf,UACGE,EAAMC,OADT,MACoBD,EAAML,yBAG5B,uBACA,0CACC3B,EAAgB+B,KAAI,SAACG,GAAD,OACnB,sBAAKJ,UAAU,cAAf,UACGI,EAAeD,OADlB,KAC4B,IACzBC,EAAeP,yBAGpB,+BAKN,qCACE,sBAAKG,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,YAAf,SAA4BlC,EAAYqC,SACvCxC,GACC,qBAAKqC,UAAU,YAAf,SACGlC,EAAY+B,wBAInB,uBACEQ,WAAW,EACXC,KAAK,OACLC,MAAOnC,EACPoC,WAAY,SAACC,GAAD,OA1DH,SAACA,GACJ,UAAdA,EAAMC,KACRd,IAwDiCe,CAAeF,IACtCG,SAAU,SAACH,GAAD,OAAWpC,EAAQoC,EAAMI,OAAON,UAE5C,sBAAKP,UAAU,YAAf,UACGvC,EAAQ,EADX,OACkBuB,EAAaS,OAD/B,KACyCE,EADzC,UAIF,sBAAKK,UAAU,cAAf,UACE,wBAAQA,UAAU,gBAAgBc,QAAS,kBAAMlB,KAAjD,kBAGA,wBACEI,UAAU,kBACVc,QAAS,WA1ErBlD,GAAY,IAwEF,sBAMA,8CACA,uBACE0C,KAAK,SACLC,MAAO3B,EACPgC,SAAU,SAACH,GAAD,OACR5B,EAAckC,SAASN,EAAMI,OAAON,WAGxC,kDACA,uBACED,KAAK,SACLC,MAAOzB,EACP8B,SAAU,SAACH,GAAD,OACR1B,EAAiBgC,SAASN,EAAMI,OAAON,WAG3C,wBAAQP,UAAU,kBAAkBc,QAAS,kBApFvDpD,EAAS,GACTE,GAAY,GACZK,EAAU,IACVE,EAAmB,IACnBE,EAAQ,SACRI,EAAaH,KAAKC,QA+ER,gCC1JCyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.eedb84e7.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport numbers from \"./data/numbers.json\";\n\nexport const App = () => {\n  const [index, setIndex] = useState(0);\n  const [showText, setShowText] = useState(false);\n  const [currentItem, setCurrentItem] = useState(numbers[0]);\n  const [errors, setErrors] = useState([]);\n  const [acceptedAnswers, setAcceptedAnswers] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [startTime, setStartTime] = useState(Date.now());\n  const [elapsedTime, setElapsedTime] = useState();\n  const [startIndex, setStartIndex] = useState();\n  const [numberOfItems, setNumberOfItems] = useState();\n  const [shownNumbers, setShownNumbers] = useState([]);\n\n  useEffect(() => {\n    setStartIndex(0);\n    setIndex(0);\n    setNumberOfItems(10);\n  }, []);\n\n  useEffect(() => {\n    if (\n      startIndex < 0 ||\n      numberOfItems < 1 ||\n      numberOfItems + startIndex > 100 ||\n      isNaN(startIndex) ||\n      isNaN(numberOfItems)\n    ) {\n      return;\n    }\n    const items = numbers\n      .slice(startIndex, startIndex + numberOfItems)\n      .sort(() => 0.5 - Math.random());\n    setShownNumbers(items);\n  }, [numberOfItems, startIndex]);\n\n  useEffect(() => {\n    if (shownNumbers.length === 0) {\n      return;\n    }\n    setCurrentItem(shownNumbers[index]);\n  }, [index, shownNumbers]);\n\n  const lastImage = index >= shownNumbers.length;\n  const displayText = `Errors ${errors.length}, Accepted answers ${acceptedAnswers.length}`;\n\n  const showNextItem = () => {\n    if (!showText) {\n      setShowText(true);\n      return;\n    }\n    if (currentItem.swedishTranslation.toLowerCase() === text.toLowerCase()) {\n      setAcceptedAnswers([...acceptedAnswers, currentItem]);\n    } else {\n      setErrors([...errors, currentItem]);\n    }\n\n    setText(\"\");\n    setShowText(false);\n    setIndex(index + 1);\n\n    const lastImage = index >= shownNumbers.length - 1;\n    if (lastImage) {\n      const secondsSinceStart = (Date.now() - startTime) / 1000;\n      setElapsedTime(`${secondsSinceStart} seconds`);\n    }\n  };\n\n  const showTextButtonPress = () => {\n    setShowText(true);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      showNextItem();\n    }\n  };\n\n  const restart = () => {\n    setIndex(0);\n    setShowText(false);\n    setErrors([]);\n    setAcceptedAnswers([]);\n    setText(\"\");\n    setStartTime(Date.now());\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"topLevel\">\n        {lastImage ? (\n          <div className=\"content\">\n            <div className=\"mainContent\">\n              <div className=\"largeText\">{displayText}</div>\n              <div>\n                <div>Total time: {elapsedTime}</div>\n                <br />\n                <div>Errors</div>\n                {errors.map((error) => (\n                  <div className=\"error-items\">\n                    {error.number} - {error.swedishTranslation}\n                  </div>\n                ))}\n                <br />\n                <div>Correct</div>\n                {acceptedAnswers.map((acceptedAnswer) => (\n                  <div className=\"error-items\">\n                    {acceptedAnswer.number} -{\" \"}\n                    {acceptedAnswer.swedishTranslation}\n                  </div>\n                ))}\n                <br />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <>\n            <div className=\"content\">\n              <div className=\"mainContent\">\n                <div className=\"largeText\">{currentItem.number}</div>\n                {showText && (\n                  <div className=\"largeText\">\n                    {currentItem.swedishTranslation}\n                  </div>\n                )}\n              </div>\n              <input\n                autoFocus={true}\n                type=\"text\"\n                value={text}\n                onKeyPress={(event) => handleKeyPress(event)}\n                onChange={(event) => setText(event.target.value)}\n              ></input>\n              <div className=\"smallText\">\n                {index + 1} of {shownNumbers.length} ({displayText})\n              </div>\n            </div>\n            <div className=\"buttonGroup\">\n              <button className=\"primaryButton\" onClick={() => showNextItem()}>\n                Next\n              </button>\n              <button\n                className=\"secondaryButton\"\n                onClick={() => showTextButtonPress()}\n              >\n                I forgot\n              </button>\n              <div>Start index</div>\n              <input\n                type=\"number\"\n                value={startIndex}\n                onChange={(event) =>\n                  setStartIndex(parseInt(event.target.value))\n                }\n              ></input>\n              <div>Number of items</div>\n              <input\n                type=\"number\"\n                value={numberOfItems}\n                onChange={(event) =>\n                  setNumberOfItems(parseInt(event.target.value))\n                }\n              ></input>\n              <button className=\"secondaryButton\" onClick={() => restart()}>\n                Restart\n              </button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}