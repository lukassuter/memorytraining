{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["items","numbers","sort","a","b","Math","random","App","useState","index","setIndex","showText","setShowText","currentItem","setCurrentItem","errors","setErrors","text","setText","showNextItem","swedishTranslation","toLowerCase","useEffect","length","lastImage","className","number","type","value","onKeyPress","event","key","handleKeyPress","onChange","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4lGAGMA,EAAQC,EAAQC,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,YAqFjCC,EAnFI,WAAO,IAAD,EACGC,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,OAESF,oBAAS,GAFlB,mBAEhBG,EAFgB,KAENC,EAFM,OAGeJ,mBAASR,EAAMS,IAH9B,mBAGhBI,EAHgB,KAGHC,EAHG,OAIKN,mBAAS,GAJd,mBAIhBO,EAJgB,KAIRC,EAJQ,OAKCR,mBAAS,IALV,mBAKhBS,EALgB,KAKVC,EALU,KAOjBC,EAAe,WACfN,EAAYO,mBAAmBC,gBAAkBJ,GACnDD,EAAUD,EAAS,GAGrBG,EAAQ,IACRN,GAAY,GACZF,EAASD,EAAQ,IAanBa,qBAAU,WACJb,EAAQT,EAAMuB,QAChBT,EAAed,EAAMS,MAEtB,CAACA,IAEJ,IAAMe,EAAYf,GAAST,EAAMuB,OAEjC,OACE,qBAAKE,UAAU,YAAf,SACE,qBAAKA,UAAU,WAAf,SACGD,EACC,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,YAAf,oBAAmCV,SAIvC,qCACE,sBAAKU,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,YAAf,SAA4BZ,EAAYa,SACvCf,GACC,qBAAKc,UAAU,YAAf,SACGZ,EAAYO,wBAInB,uBACEO,KAAK,OACLC,MAAOX,EACPY,WAAY,SAACC,GAAD,OArCH,SAACA,GACJ,UAAdA,EAAMC,KACRZ,IAmCiCa,CAAeF,IACtCG,SAAU,SAACH,GAAD,OAAWZ,EAAQY,EAAMI,OAAON,UAE5C,sBAAKH,UAAU,YAAf,UACGhB,EAAQ,EADX,OACkBT,EAAMuB,OADxB,aAC0CR,EAD1C,UAIF,sBAAKU,UAAU,cAAf,UACE,wBAAQA,UAAU,gBAAgBU,QAAS,kBAAMhB,KAAjD,kBAGA,wBACEM,UAAU,kBACVU,QAAS,WArDrBvB,GAAY,IAmDF,iCC9DCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6b5eb39e.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport numbers from \"./data/numbers1to49.json\";\nconst items = numbers.sort((a, b) => 0.5 - Math.random());\n\nexport const App = () => {\n  const [index, setIndex] = useState(0);\n  const [showText, setShowText] = useState(false);\n  const [currentItem, setCurrentItem] = useState(items[index]);\n  const [errors, setErrors] = useState(0);\n  const [text, setText] = useState(\"\");\n\n  const showNextItem = () => {\n    if (currentItem.swedishTranslation.toLowerCase() !== text) {\n      setErrors(errors + 1);\n    }\n\n    setText(\"\");\n    setShowText(false);\n    setIndex(index + 1);\n  };\n\n  const showTextButtonPress = () => {\n    setShowText(true);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      showNextItem();\n    }\n  };\n\n  useEffect(() => {\n    if (index < items.length) {\n      setCurrentItem(items[index]);\n    }\n  }, [index]);\n\n  const lastImage = index >= items.length;\n\n  return (\n    <div className=\"container\">\n      <div className=\"topLevel\">\n        {lastImage ? (\n          <div className=\"content\">\n            <div className=\"mainContent\">\n              <div className=\"largeText\">Errors {errors}</div>\n            </div>\n          </div>\n        ) : (\n          <>\n            <div className=\"content\">\n              <div className=\"mainContent\">\n                <div className=\"largeText\">{currentItem.number}</div>\n                {showText && (\n                  <div className=\"largeText\">\n                    {currentItem.swedishTranslation}\n                  </div>\n                )}\n              </div>\n              <input\n                type=\"text\"\n                value={text}\n                onKeyPress={(event) => handleKeyPress(event)}\n                onChange={(event) => setText(event.target.value)}\n              ></input>\n              <div className=\"smallText\">\n                {index + 1} of {items.length} (Errors: {errors})\n              </div>\n            </div>\n            <div className=\"buttonGroup\">\n              <button className=\"primaryButton\" onClick={() => showNextItem()}>\n                Next\n              </button>\n              <button\n                className=\"secondaryButton\"\n                onClick={() => showTextButtonPress()}\n              >\n                I forgot\n              </button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}